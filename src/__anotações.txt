AngularJS
========
- tem componentes que podem ser reusáveis e modulares
- pode ser integrado ao backend da aplicação
- facilita a automação de testes
- tem forte engajamento da comunidade
- IE8 só funciona até o AngularJS 1.2
- é passível de uglify (utilizando o grunt)


Arquitetura
========
- MVC
- View = Scope = Controller (o scope faz o intermédio entre eles)
- ng são diretivas do Angular


Diretivas
========
- extensões da linguagem HTML com novos comportamentos

1) ngApp: define a fronteira da aplicação
2) ngController: vincula a view ao Controller
3) ngRepeat: para uso com arrays e objetos
4) ngBind: pega do $scope e apresenta na view
5) ngModel: pega da view e define no $scope.
   obs.: por default é two way databind.
6) ngInclude: inclui conteúdo dinamicamente
7) ngRequired: para declarar em um campo que é obrigatório
8) ngMinLength ~ ngMaxLength: para definir tamanho mínimo e máximo
   obs.: não é máscara é sim validação.
   $error: objeto que contém as validações e seus status
9) ngPattern: regex para validação de campos
10) ngClass: setar classes dinamicamente
11) ngStyle: serve para setar o estilo dinamicamente inline
12) ngShow ~ ngHide ~ ngIf: seve para apresentar/ocultar elementos de
    forma dinâmica
    obs: if interage com a DOM, hide/show são apenas variantes do display;
13) ngClick: reage ao evento de clique.
14) ngDisabled: desabilita um elemento dinamicamente
15) ngOption: renderiza as opções de select

    obs.: interpolação perdoa valores null (não gera exceção/não imprime nada)



Design de Projeto
========
- domain style: agrupa arquivos por domínio

  + app /
    + login /
      / css
      / js
      / view
      / controller
      / service
    + questionario /
      / css
      / js
      / view
      / controller
      / service
    index.html


Criando Services
========

# isolar os servicos torna mais fácil testar
# objeto único criado na inicialização

Tipos de serviços:

- Value: pode ser utilizado ao longo da aplicação, desde que
- Constant: pode ser utilizado ao longo da aplicação (inclusive em Providers)
- Factory: faz a invocação e tem um objeto de retorno (var getOperadora = fun ...)
- Service: utiliza uma função construtora (this.getOPeradora = fun ...)
- Provider: passar parâmetro para esse serviço configurando
            (somente serviços do tipo provider podem ser configurados)
            as configurações de um provider ficam na pasta config da mesma.
            obs.: tem que ter o this.$get no construtor (é um misto de factory
            com service)
            obs2.: somente constants podem ser injetados no serviço do tipo
            provider


Criando Filtros:
========

# os filtros nem sempre filtram (as vezes eles transformam)
# ele em si é uma função
# o input que é repassado a expression ex.: {{ contato.telefone }}


Criando Directives
========

# as diretivas retornam DDO (Directive Definition Object)
# esses objetos determinam as propriedades da diretiva
# como o html é case insensitive e o js é case insensitive, no nome da diretiva
  nós setamos como NgRepeat (no html será lido como ng-repeat)

Tipos de propriedades:

- template (ou templateUrl): tem funcionamnento parecido com o ng-include.
  Essa propriedade serve para componentes que eu desejo reusar.
  obs.: nem toda diretiva tem template

- replace: se estiver setado como true ele remove o elemento ao qual você
  acrescentou a diretiva. (o default é false)

- restrict: são quatro tipos de restrições - "A" (ao atributo), "E"
  (ao elemento), "C" (classe) e "M" (comentário/mensagem).
  obs.: é possível também concatenar as restrições.

- scope: define em qual escopo a diretiva está (para que não se colidam as
  propriedades - ou variáveis).
  Faz a mediação (passagem) da comunicação entre a diretiva e o local onde está
  sendo aplicada.
  O @ faz o vínculo do valor do atributo (do "title") com a propriedade da
  diretiva (topic).
  Se a propridade da diretiva e o nome forem iguais basta passar apenas o @
  como valor que dará certo.
  O = faz o two-way databinding, e o @ é one-way.
  Quando você isola o escopo você deixa de acessar escopos externos.
  Dica = caso queira saber em qual escopo está, basta usar o {{$id}}

- transclude: serve para que o conteúdo dentro da tag onde será inserida a
  diretiva não seja perdido. (porém não isola o escopo)
  Setar ng-transclude na tag e no valor da propriedade setar como true.

- require: permite acesso a atributos do controller em questão.

- link: usada após o template ser compilado, permitindo que se interaja com a
  DOM.
  O primeiro parâmetro é o scope, que será o mesmo do app caso você não isole o
  escopo.
  O segundo parâmetro é o element. (dar uma olhada no angular.jqLite)
  O terceiro elemento são os atributos desse elemento.
  O quarto elemento é o require, ao qual pode conceder acesso a atributos do
  controller.

  dica: estudar a API do ngModel e de elements

  desafio: criar diretivas que formatem diversos tipos de valores (CEP, CPF ...)

- controller: permite definir uma API que seja compartilhada com outras
  diretivas
  Para fazer isso basta criar uma outra diretiva que faça o registro das diretivas filhas.
  Recomenda-se o estudo do serviço $compile (que fala sobre todas as propriedades)


Modularização
========

- módulo é uma coleção de componentes (conjunto de controllers, directives, services, filters...)
- criação: angular.module("nomeDoModulo", []);
- localização do módulo: angular.module("nomeDoModulo");
- estudar estratégia do templateCache e o uglify com o Grunt;


SPA com ng-route
========

- utilização completa de tecnologias como o Ajax para que 100% da página seja única
- tempo de loading seja um pouco superior comparado a outras aplicações (primeiro carregamento)
- ngRoute fornece serviços para rotear páginas
- para configurar o roteamento é necessário utilizar o $routeProvider
- o segundo parâmetro é o route object // ex.: $routeProvider.when("/contatos", {});
- ngView para renderizar o template da rota acessada
- é possível configurar o controller no objeto de roteamento (fazendo o link dos dois)
- o método otherwise permite que seja setada uma rota em caso de fallback
- se usar o templateCache uma vez carregado ele irá retornar 304 (not modified)
- se usar a configuração resolve é possível carregar dependências que sejam por ventura necessárias
  (ele faz essa demanda de forma implícita caso implementado)
  necessário revisar depois a parte do resolve quando a API estiver respondendo corretamente
  (lição 14)


Interceptor
========

- serviço que permite interceptar requisições e respostas http(s)
- é registrado como uma factory
- é necessário configurar o interceptor
- é possível setar por exemplo, um timestamp interceptor (evitar problema cache)
- o comportamento do angular frente a uma rejeição é não rotear (mantém na mesma
  rota caso não tenha fallback)
- $q é a imlementação default do angular para trabalhar com o padrão "promisses\
  deferred".
- loading interceptor: pode ser usado nos momentos de loading da aplicação
